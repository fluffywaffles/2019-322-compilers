// Numbers are still encoded in L3. See test/test10.L3 for a minimal ex.
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
define :main () {
// Let's do some bounds checking, why not?
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
  %size <- 15
  %init <- 0
  %size_encoded <- call :encode (%size)
  %init_encoded <- call :encode (%init)
  %array <- call allocate (%size_encoded, %init_encoded)

  //
  // Initialize %array with 1..15
  //

  call :array_fill_through (%array, 15)
  call print (%array)

  //
  // Test array_swap
  //

  call :array_swap (%array, 4, 5) // swaps values 5 and 6
  call print (%array)

  return
}

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
define :array_fill_through (%array, %limit) {
// Fill an array with values from 1 through (including) %limit
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
  %i <- 1 // REMEMBER: the array's 1st element is its *size*, so skip 1
  :initialize_array
  // &array[i] = &array + 8*i
  %i_offset <- %i << 3
  %array_i <- %array + %i_offset
  // Store that value at array_i
  %i_value <- call :encode (%i)
  store %array_i <- %i_value
  // Increment %i
  %i <- %i + 1
  // Loop until we reach the end of the array
  %continue <- %i <= %limit
  br %continue :initialize_array
  return
}

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
define :checked_array_pointer_to (%array, %index) {
// Safely(!) get the address of an element of an array.
// NOTE: Efficiency is traded for safety for no particular reason here.
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
  %index <- %index + 1 // Indices start at 1! Programmers count from 0!
  %size <- call :array_size(%array)
  // Perform bounds check.
  %in_bounds <- %index <= %size
  br %in_bounds :OK_in_bounds
  // :NOK_in_bounds // NOTE this cannot be here; it creates ambiguous L2
    %index_encoded <- call :encode(%index)
    call array-error (%array, %index_encoded) // do not pass go; etc.
  :OK_in_bounds
    %offset <- %index << 3
    %array_i_ptr <- %array + %offset
  return %array_i_ptr
}

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
define :array_swap (%array, %i, %j) {
// Swap 2 elements of an array.
// NOTE: Uses (very) unnecessary amounts of stack space.
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
  // get &a[i], &a[j]
  %array_i_ptr <- call :checked_array_pointer_to(%array, %i)
  %array_j_ptr <- call :checked_array_pointer_to(%array, %j)
  // load a[i], a[j]
  %array_i <- load %array_i_ptr
  %array_j <- load %array_j_ptr
  // swap a[i] â†” a[j]
  store %array_i_ptr <- %array_j
  store %array_j_ptr <- %array_i
  return
}

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
define :checked_array_at (%array, %index) {
// Safely(!) get an element of an array
// NOTE: Efficiency is traded for safety for no particular reason here.
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
  %array_i_ptr <- call :checked_array_pointer_to(%array, %index)
  %array_i <- load %array_i_ptr
  return %array_i
}

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
define :checked_array_set (%array, %index, %value) {
// Safely(!) set an element of an array
// NOTE: %value must be encoded.
// NOTE: Efficiency is traded for safety for no particular reason here.
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
  %array_i_ptr <- call :checked_array_pointer_to(%array, %index)
  store %array_i_ptr <- %value
  return
}

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
define :print_array (%array) {
// Recursively & inefficiently print the whole of an array
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
  %size <- call :array_size (%array)
  %print_array_range <- :print_array_range
  call :trampoline_3(%array, 0, %size, %print_array_range)
  return
}

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
define :print_array_range (%array, %index, %end) {
// Recursively print a range of values from an array
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
  %index_lt_end <- %index < %end
  br %sindex_lt_end :OK_index_lt_end
  // :NOK_index_lt_end // NOTE this creates ambiguous L2
    call array-error(%array, %index)
  :OK_index_lt_end
  %array_i <- call :checked_array_at(%array, %index)
  call print (%array_i)
  // Try to recur... NOTE: this SHOULD blow the stack! (Probably.)
  // %index <- %index + 1
  // call :print_array_range(%array, %index, %end)
  // return
  // Trampoline version:
  return :print_array_range
}

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
define :trampoline_3 (%arg1, %arg2, %arg3, %function) {
// Make the stack bouncy
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
  :trampoline_jump
  %next <- call %function (%arg1, %arg2, %arg3)
  %returns_self <- %next = %function
  br %returns_self :trampoline_jump
  return
}

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
define :array_size (%array) {
// Get the size of an array
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
  %size <- load %array // get array size (not! encoded)
  return %size
}

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
define :encode (%value) {
// Encode a number in order to pass it into a runtime call.
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
  %result <- %value << 1
  %result <- %result + 1
  return %result
}
